{"version":3,"sources":["Player.js"],"names":["cc","Class","extends","Component","properties","jumpHeight","jumpDuration","maxMoveSpeed","accel","jumpAudio","default","url","AudioClip","setJumpAction","jumpUp","moveBy","p","easing","easeCubicActionOut","jumpDown","easeCubicActionIn","callback","callFunc","playJumpSound","repeatForever","sequence","audioEngine","playEffect","setInputControl","self","systemEvent","on","SystemEvent","EventType","KEY_DOWN","event","keyCode","KEY","a","accLeft","d","accRight","KEY_UP","onLoad","jumpAction","node","runAction","xSpeed","update","dt","Math","abs","x"],"mappings":"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","file":"Player.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // Main character's jump height\n        jumpHeight: 0,\n\n        // Main character's jump duration\n        jumpDuration: 0,\n\n        // Maximum movement speed\n        maxMoveSpeed: 0,\n\n        // Acceleration\n        accel: 0,\n\n        // Jump audio\n        jumpAudio: {\n            default: null,\n            url: cc.AudioClip\n        }\n    },\n\n    setJumpAction: function () {\n        // Jump up\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.p(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\n\n        // Jump down\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.p(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\n\n        // Add a callback function to invoke other defined methods after the action is finished\n        var callback = cc.callFunc(this.playJumpSound, this);\n\n        // Repeat\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown, callback));\n    },\n\n    playJumpSound: function() {\n        cc.audioEngine.playEffect(this.jumpAudio, false);\n    },\n\n    setInputControl: function () {\n        var self = this;\n\n        // Add keyboard event listener\n        // When there is a key being pressed down, judge if it's the designated directional button and set up\n        // acceleration in the corresponding direction\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, function (event){\n            switch(event.keyCode) {\n                case cc.KEY.a:\n                    self.accLeft = true;\n                    break;\n                case cc.KEY.d:\n                    self.accRight = true;\n                    break;\n            }\n        });\n\n        // When releasing the button, stop acceleration in this direction\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, function (event){\n            switch(event.keyCode){\n                case cc.KEY.a:\n                    self.accLeft = false;\n                    break;\n                case cc.KEY.d:\n                    self.accRight = false;\n                    break;\n            }\n        });\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad is called immediately after loading the scene--put initialization logic here.\n    onLoad: function () {\n\n        // Initialize jump action\n        this.jumpAction = this.setJumpAction();\n        this.node.runAction(this.jumpAction);\n\n        // Turn off acceleration direction\n        this.accLeft = false;\n        this.accRight = false;\n        \n        // Current horizontal speed of main character\n        this.xSpeed = 0;\n\n        // Initialize keyboard input listender\n        this.setInputControl();\n    },\n\n\n    /*\n    start () {\n\n    },\n    */ \n\n    // Update is called for each frame after the loading scene.\n    // Put logic that needs to be frequently calculated or updated here.\n    update: function (dt) {\n        // Update speed of each frame according to the current acceleration direction\n        if (this.accLeft){\n            this.xSpeed -= this.accel * dt;\n        } else if (this.accRight) {\n            this.xSpeed += this.accel * dt;\n        }\n\n        // Restrict the movement speed of the main character to the maximum movement speed\n        if ( Math.abs(this.xSpeed) > this.maxMoveSpeed ) {\n            // If speed reaches its limit, use the max speed with current direction\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\n        }\n\n        // Update the position of the main character according to the current speed\n        this.node.x += this.xSpeed * dt;\n    },\n});\n"]}