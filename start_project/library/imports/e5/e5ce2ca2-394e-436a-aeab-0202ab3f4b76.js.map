{"version":3,"sources":["../../../../assets/scripts/assets/scripts/Star.js"],"names":["cc","Class","extends","Component","properties","pickRadius","game","default","serializable","getPlayerDistance","playerPos","player","getPosition","dist","pDistance","node","position","onPicked","spawnNewStar","gainScore","destroy","update","dt","opacityRatio","timer","starDuration","minOpacity","opacity","Math","floor"],"mappings":";;;;;;AAAAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACR;AACA;AACAC,oBAAY,CAHJ;;AAKR;AACAC,cAAM;AACFC,qBAAS,IADP;AAEFC,0BAAc;AAFZ;AANE,KAHP;;AAeL;;AAEA;;AAEAC,uBAAmB,6BAAW;AAC1B;AACA,YAAIC,YAAY,KAAKJ,IAAL,CAAUK,MAAV,CAAiBC,WAAjB,EAAhB;;AAEA;AACA,YAAIC,OAAOb,GAAGc,SAAH,CAAa,KAAKC,IAAL,CAAUC,QAAvB,EAAiCN,SAAjC,CAAX;AACA,eAAOG,IAAP;AACH,KA1BI;;AA4BLI,cAAU,oBAAW;AACjB;AACA;AACA,aAAKX,IAAL,CAAUY,YAAV;;AAEA;AACA,aAAKZ,IAAL,CAAUa,SAAV;;AAEA;AACA,aAAKJ,IAAL,CAAUK,OAAV;AACH,KAtCI;;AAwCL;;;;;AAMA;AACAC,YAAQ,gBAAUC,EAAV,EAAc;AAClB;AACA;AACA,YAAI,KAAKb,iBAAL,KAA2B,KAAKJ,UAApC,EAAgD;AAC5C;AACA,iBAAKY,QAAL;AACA;AACH;;AAED;AACA,YAAIM,eAAe,IAAI,KAAKjB,IAAL,CAAUkB,KAAV,GAAgB,KAAKlB,IAAL,CAAUmB,YAAjD;AACA,YAAIC,aAAa,EAAjB;AACA,aAAKX,IAAL,CAAUY,OAAV,GAAoBD,aAAaE,KAAKC,KAAL,CAAWN,gBAAgB,MAAMG,UAAtB,CAAX,CAAjC;AACH;AA5DI,CAAT","file":"Star.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // When the distance between the star and main character is less than this value,\n        // collection of the point will be completed.\n        pickRadius: 0,\n\n        // The game object\n        game: {\n            default: null,\n            serializable: false\n        }\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    getPlayerDistance: function() {\n        // Judge the the distance according to the position of the player node\n        var playerPos = this.game.player.getPosition();\n\n        // Calculate the distance between two nodes according to their positions\n        var dist = cc.pDistance(this.node.position, playerPos);\n        return dist;\n    },\n\n    onPicked: function() {\n        // When the stars are being collected, invoke the interface in the Game script\n        // to generate a new star\n        this.game.spawnNewStar();\n\n        // Score a point\n        this.game.gainScore();\n\n        // Destroy current star's node\n        this.node.destroy();\n    },\n\n    /*\n    start () {\n\n    },\n    */\n\n    // update (dt) {},\n    update: function (dt) {\n        // Judge if the distance between the star and main character is shorter than \n        // the collecting distance for each frame\n        if (this.getPlayerDistance() < this.pickRadius) {\n            // Invoke collecting behavior\n            this.onPicked();\n            return;\n        }\n\n        // Update the transparency of the star according to how much life is left\n        var opacityRatio = 1 - this.game.timer/this.game.starDuration;\n        var minOpacity = 50;\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n    },\n});\n"]}